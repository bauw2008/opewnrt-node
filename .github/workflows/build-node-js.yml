name: Build and Release Node.js for OpenWrt

on:
  workflow_dispatch:
    inputs:
      node_version:
        description: "Node.js version (choose: 20, 22, 24)"
        required: true
        default: "20"
      target_arch:
        description: "Target architecture (choose: x86_64, aarch64)"
        required: true
        default: "x86_64"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: ${{ github.event.inputs.node_version }}
      TARGET_ARCH: ${{ github.event.inputs.target_arch }}
      RELEASE_TAG: node-v${{ github.event.inputs.node_version }}-${{ github.event.inputs.target_arch }}

    steps:
    - name: Checkout workflow repo
      uses: actions/checkout@v4

    - name: Validate inputs
      run: |
        case "$NODE_VERSION" in
          20|22|24) echo "Node.js version OK: $NODE_VERSION";;
          *) echo "❌ Invalid Node.js version: $NODE_VERSION. Must be 20, 22, or 24."; exit 1;;
        esac

        case "$TARGET_ARCH" in
          x86_64|aarch64) echo "Target arch OK: $TARGET_ARCH";;
          *) echo "❌ Invalid target arch: $TARGET_ARCH. Must be x86_64 or aarch64."; exit 1;;
        esac

    - name: Clone OpenWrt master
      run: |
        git clone --depth 1 https://github.com/openwrt/openwrt.git

    - name: Add custom node feed & update feeds
      working-directory: ./openwrt
      run: |
        echo "src-git node https://github.com/nxhack/openwrt-node-packages.git" >> feeds.conf.default
        ./scripts/feeds update -a
        rm -rf feeds/packages/lang/node*
        rm -rf package/feeds/packages/node*
        ./scripts/feeds install -a -p node

    - name: Install build dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib gperf unzip \
          libncurses5-dev zlib1g-dev libssl-dev python3 python3-apt python3-distutils-extra rsync \
          subversion git wget file python3-pip coreutils
        pip3 install --user meson ninja

    - name: Fix environment and Makefile
      working-directory: ./openwrt
      run: |
        # 关键修复：彻底清除ARCH环境变量
        unset ARCH
        unset CROSS_COMPILE
        unset CROSS_COMPILE_ARM
        
        # 修复Makefile
        sed -i 's/CFLAGS= -O2 $(call cc-option,-fno-PIE) $(call cc-option,-fno-stack-protector)/CFLAGS= -O2/' scripts/config/Makefile
        
        # 设置正确的目标架构选项
        case "$TARGET_ARCH" in
          x86_64)
            export TARGET_OPTIONS="x86_64"
            ;;
          aarch64)
            export TARGET_OPTIONS="aarch64"
            ;;
        esac

    - name: Configure build
      working-directory: ./openwrt
      run: |
        rm -f .config
        
        # 使用正确的目标配置
        case "$TARGET_ARCH" in
          x86_64)
            cat <<EOF >> .config
CONFIG_TARGET_x86=y
CONFIG_TARGET_x86_64=y
CONFIG_TARGET_x86_64_DEVICE_generic=y
EOF
            ;;
          aarch64)
            cat <<EOF >> .config
CONFIG_TARGET_armvirt=y
CONFIG_TARGET_armvirt_64=y
CONFIG_TARGET_armvirt_64_Default=y
EOF
            ;;
        esac

        # 禁用所有Node版本然后启用选定的版本
        echo "# CONFIG_NODEJS_20 is not set" >> .config
        echo "# CONFIG_NODEJS_22 is not set" >> .config
        echo "# CONFIG_NODEJS_24 is not set" >> .config

        case "$NODE_VERSION" in
          20) echo "CONFIG_NODEJS_20=y" >> .config ;;
          22) echo "CONFIG_NODEJS_22=y" >> .config ;;
          24) echo "CONFIG_NODEJS_24=y" >> .config ;;
        esac

        echo "CONFIG_PACKAGE_node=y" >> .config
        echo "CONFIG_PACKAGE_apk-mbedtls=y" >> .config
        
        # 应用配置
        make defconfig

    - name: Build toolchain
      working-directory: ./openwrt
      run: |
        # 单线程构建工具链避免问题
        make tools/install -j1 V=s
        make toolchain/install -j1 V=s

    - name: Compile Node.js
      working-directory: ./openwrt
      run: |
        # 关键修复：在构建Node前设置ARCH变量
        case "$TARGET_ARCH" in
          x86_64)
            export ARCH=x86_64
            ;;
          aarch64)
            export ARCH=aarch64
            ;;
        esac
        
        # 单线程构建Node.js避免并发问题
        make package/feeds/node/node/compile -j1 V=s

    - name: Package artifacts
      run: |
        mkdir -p output/apk output/keys
        
        # 查找APK文件
        find openwrt/bin -name "node*.apk" -exec cp {} output/apk/ \;
        
        # 查找密钥 - 根据OpenWrt版本可能有不同位置
        KEY_DIRS=(
          "openwrt/staging_dir/target-*/etc/apk/keys"
          "openwrt/staging_dir/target-*/root-*/etc/apk/keys"
        )
        
        for dir in "${KEY_DIRS[@]}"; do
          if [ -d "$dir" ]; then
            cp -r "$dir"/* output/keys/
            break
          fi
        done

        cd output
        tar -czvf node-apk-${TARGET_ARCH}.tar.gz apk
        [ -d keys ] && tar -czvf node-apk-keys.tar.gz keys || echo "No keys found"

    - name: Setup GitHub CLI
      run: sudo apt install -y gh

    - name: Authenticate GH CLI
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
      run: echo "$GH_TOKEN" | gh auth login --with-token

    - name: Create Release
      run: |
        if ! gh release view "$RELEASE_TAG"; then
          gh release create "$RELEASE_TAG" \
            --title "Node.js $NODE_VERSION for $TARGET_ARCH" \
            --notes "Built on $(date +%Y-%m-%d)"
        fi

    - name: Upload Assets
      run: |
        gh release upload "$RELEASE_TAG" \
          output/node-apk-${TARGET_ARCH}.tar.gz \
          $( [ -f output/node-apk-keys.tar.gz ] && echo "output/node-apk-keys.tar.gz" ) \
          --clobber
