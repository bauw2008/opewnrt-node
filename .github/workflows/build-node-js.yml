name: Build and Release Node.js for OpenWrt

on:
  workflow_dispatch:
    inputs:
      node_version:
        description: "Node.js version (choose: 20, 22, 24)"
        required: true
        default: "20"
      target_arch:
        description: "Target architecture (choose: x86_64, aarch64)"
        required: true
        default: "x86_64"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: ${{ github.event.inputs.node_version }}
      TARGET_ARCH: ${{ github.event.inputs.target_arch }}
      RELEASE_TAG: node-v${{ github.event.inputs.node_version }}-${{ github.event.inputs.target_arch }}

    steps:
    - name: Checkout workflow repo
      uses: actions/checkout@v4

    - name: Validate inputs
      run: |
        case "$NODE_VERSION" in
          20|22|24) echo "✅ Node.js version OK: $NODE_VERSION";;
          *) echo "❌ Invalid Node.js version: $NODE_VERSION. Must be 20, 22, or 24."; exit 1;;
        esac

        case "$TARGET_ARCH" in
          x86_64|aarch64) echo "✅ Target arch OK: $TARGET_ARCH";;
          *) echo "❌ Invalid target arch: $TARGET_ARCH. Must be x86_64 or aarch64."; exit 1;;
        esac

    - name: Clone OpenWrt master
      run: git clone --depth 1 https://github.com/openwrt/openwrt.git

    - name: Setup ccache (speed up rebuilds)
      run: |
        sudo apt update
        sudo apt install -y ccache
        export PATH="/usr/lib/ccache:$PATH"
        echo "export PATH=/usr/lib/ccache:\$PATH" >> $GITHUB_ENV

    - name: Install build dependencies
      run: |
        sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib gperf unzip \
          libncurses5-dev zlib1g-dev libssl-dev python3 python3-apt python3-distutils-extra rsync \
          subversion git wget file python3-pip
        pip3 install --user meson ninja

    - name: Prepare OpenWrt feeds and configs
      working-directory: ./openwrt
      run: |
        echo "src-git node https://github.com/nxhack/openwrt-node-packages.git" >> feeds.conf.default
        ./scripts/feeds update -a
        ./scripts/feeds install -a -p node

        # 创建最小化的 .config
        cat <<EOF > .config
        CONFIG_TARGET_${TARGET_ARCH%=*}=y
        CONFIG_TARGET_${TARGET_ARCH}_Generic=y
        EOF

        case "$NODE_VERSION" in
          20) echo "CONFIG_NODEJS_20=y" >> .config ;;
          22) echo "CONFIG_NODEJS_22=y" >> .config ;;
          24) echo "CONFIG_NODEJS_24=y" >> .config ;;
        esac

        echo "CONFIG_PACKAGE_node=y" >> .config
        echo "CONFIG_PACKAGE_apk-mbedtls=y" >> .config

    - name: Build toolchain and dependencies
      working-directory: ./openwrt
      run: |
        make defconfig
        make tools/install -j$(nproc) V=s
        make toolchain/install -j$(nproc) V=s

    - name: Build Node.js package
      working-directory: ./openwrt
      run: |
        make package/feeds/node/node/compile -j$(nproc) V=s

    - name: Archive APK and keys
      working-directory: ./openwrt
      run: |
        mkdir -p ../../output/apk ../../output/keys
        cp bin/packages/${TARGET_ARCH}/node/node*.apk ../../output/apk/ || echo "No APKs found"
        if [ -d staging_dir/target-${TARGET_ARCH}_musl/root-${TARGET_ARCH}/etc/apk/keys ]; then
          cp -r staging_dir/target-${TARGET_ARCH}_musl/root-${TARGET_ARCH}/etc/apk/keys/* ../../output/keys/
        else
          echo "No apk keys found, skipping"
        fi
        cd ../../output
        tar -czvf node-apk-${TARGET_ARCH}.tar.gz apk
        tar -czvf node-apk-keys.tar.gz keys || echo "No keys archive created"

    - name: Install GitHub CLI
      run: sudo apt install -y gh

    - name: Authenticate GitHub CLI
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
      run: echo "$GH_TOKEN" | gh auth login --with-token

    - name: Create GitHub Release (if not exists)
      run: |
        gh release view $RELEASE_TAG || gh release create $RELEASE_TAG -t "$RELEASE_TAG" -n "Node.js ${NODE_VERSION} APK for OpenWrt ${TARGET_ARCH}"

    - name: Upload APK and keys to Release
      run: |
        gh release upload $RELEASE_TAG output/node-apk-${TARGET_ARCH}.tar.gz --clobber
        gh release upload $RELEASE_TAG output/node-apk-keys.tar.gz --clobber || echo "No keys upload"
