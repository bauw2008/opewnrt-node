name: Build and Release Node.js for OpenWrt

on:
  workflow_dispatch:
    inputs:
      node_version:
        description: "Node.js version (choose: 20, 22, 24)"
        required: true
        default: "20"
      target_arch:
        description: "Target architecture (choose: x86_64, aarch64)"
        required: true
        default: "x86_64"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: ${{ github.event.inputs.node_version }}
      TARGET_ARCH: ${{ github.event.inputs.target_arch }}
      RELEASE_TAG: node-v${{ github.event.inputs.node_version }}-${{ github.event.inputs.target_arch }}

    steps:
    - name: Checkout workflow repo
      uses: actions/checkout@v4

    - name: Validate inputs
      run: |
        case "$NODE_VERSION" in
          20|22|24) echo "Node.js version OK: $NODE_VERSION";;
          *) echo "❌ Invalid Node.js version: $NODE_VERSION. Must be 20, 22, or 24."; exit 1;;
        esac

        case "$TARGET_ARCH" in
          x86_64|aarch64) echo "Target arch OK: $TARGET_ARCH";;
          *) echo "❌ Invalid target arch: $TARGET_ARCH. Must be x86_64 or aarch64."; exit 1;;
        esac

    - name: Clone OpenWrt master
      run: |
        git clone --depth 1 https://github.com/openwrt/openwrt.git

    - name: Add custom node feed & update feeds
      working-directory: ./openwrt
      run: |
        echo "src-git node https://github.com/nxhack/openwrt-node-packages.git" >> feeds.conf.default
        ./scripts/feeds update -a
        rm -rf feeds/packages/lang/node*
        rm -rf package/feeds/packages/node*
        ./scripts/feeds install -a -p node

    - name: Install build dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib gperf unzip \
          libncurses5-dev zlib1g-dev libssl-dev python3 python3-apt python3-distutils-extra rsync \
          subversion git wget file python3-pip
        pip3 install --user meson ninja

    - name: Build scripts/config/conf tool (single-threaded)
      working-directory: ./openwrt
      run: make -j1 scripts/config/conf V=s

    - name: Configure build for selected node version and arch (single-threaded defconfig)
      working-directory: ./openwrt
      run: |
        rm -f .config

        case "$TARGET_ARCH" in
          x86_64)
            echo "CONFIG_TARGET_x86=y" >> .config
            echo "CONFIG_TARGET_x86_64=y" >> .config
            echo "CONFIG_TARGET_x86_64_Generic=y" >> .config
            ;;
          aarch64)
            echo "CONFIG_TARGET_aarch64=y" >> .config
            echo "CONFIG_TARGET_aarch64_generic=y" >> .config
            ;;
        esac

        echo "# CONFIG_NODEJS_20 is not set" >> .config
        echo "# CONFIG_NODEJS_22 is not set" >> .config
        echo "# CONFIG_NODEJS_24 is not set" >> .config

        case "$NODE_VERSION" in
          20) echo "CONFIG_NODEJS_20=y" >> .config ;;
          22) echo "CONFIG_NODEJS_22=y" >> .config ;;
          24) echo "CONFIG_NODEJS_24=y" >> .config ;;
        esac

        # 强制启用 node 包和 apk-mbedtls 依赖
        echo "CONFIG_PACKAGE_node=y" >> .config
        echo "CONFIG_PACKAGE_apk-mbedtls=y" >> .config

        make -j1 defconfig

    - name: Build toolchain and dependencies (multi-threaded)
      working-directory: ./openwrt
      run: |
        make tools/install -j$(nproc) V=s
        make toolchain/install -j$(nproc) V=s

    - name: Compile Node.js package (multi-threaded)
      working-directory: ./openwrt
      run: make package/feeds/node/node/compile -j$(nproc) V=s

    - name: Copy APK and Key Files
      run: |
        mkdir -p output/apk output/keys
        cp openwrt/bin/packages/${TARGET_ARCH}/node/node*.apk output/apk/

        if [ -d openwrt/staging_dir/target-${TARGET_ARCH}_musl/root-${TARGET_ARCH}/etc/apk/keys ]; then
          cp -r openwrt/staging_dir/target-${TARGET_ARCH}_musl/root-${TARGET_ARCH}/etc/apk/keys/* output/keys/
        else
          echo "No apk keys found, skipping key export"
        fi

        cd output
        tar -czvf node-apk-${TARGET_ARCH}.tar.gz apk
        tar -czvf node-apk-keys.tar.gz keys || echo "No keys archive created"

    - name: Install GitHub CLI
      run: sudo apt install -y gh

    - name: Authenticate GitHub CLI
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
      run: echo "$GH_TOKEN" | gh auth login --with-token

    - name: Create GitHub Release (if not exists)
      run: |
        gh release view $RELEASE_TAG || gh release create $RELEASE_TAG -t "$RELEASE_TAG" -n "Node.js ${NODE_VERSION} APK for OpenWrt ${TARGET_ARCH}"

    - name: Upload APK and Keys to Release
      run: |
        gh release upload $RELEASE_TAG output/node-apk-${TARGET_ARCH}.tar.gz --clobber
        gh release upload $RELEASE_TAG output/node-apk-keys.tar.gz --clobber || echo "No keys upload"
